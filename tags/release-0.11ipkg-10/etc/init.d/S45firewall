#!/bin/sh

##############################################
# Die firewall-Regeln sind auf diese Datei und die Datei /etc/local.fw verteilt.
# Das hat vor allem 'historische Gründe' ;)
# 
# /etc/init.d/S45firewall:
#	konfiguriert generelle Filter-Regeln zur Kommunikation zwischen
#	WIFI und LAN. Auch wird die Tabelle ipfilter hier angelegt.
# /etc/local.fw:
#	konfiguriert Filteregeln für die Tunnel (TUN, TAP) und für die
#	Nutzung des WAN-Devices. Ausserdem werden hier ip-rules angelegt

test -n "$FAILSAFE" && exit
. /etc/functions.sh
. /usr/sbin/helper_functions.sh

DEBUG="false"	# Dump dropped packets to klog, show with "dmesg -c"
if [ -n "$(nvram get on_fw_debug)" ]; then DEBUG=$(nvram get on_fw_debug); fi
if [ -z "$(lsmod | grep ipt_LOG)" ]; then DEBUG="false"; fi

set_masq() {
	DHCPWIFINET_PRE=$(get_NETPRE on_wifidhcp)

	# Mask packets from LAN to WIFI
	if [ -z "$LANOLSR" ]; then
		iptables -t nat -A POSTROUTING -o $WIFIDEV -s $LANNET/$LANPRE -j MASQUERADE
	fi
	if [ -n "$WANDEV" ] && [ -n "$WANOLSR" ] && [ -z "$LANOLSR" ]; then
		iptables -t nat -A POSTROUTING -o $WANDEV -s $LANNET/$LANPRE -j MASQUERADE
	fi
	
	# if WIFI(LANOLSR/WANOLSR)-access from DHCP-WIFI is required, enable following lines
	if [ -n "$DHCPWIFINET_PRE" ] && [ -n "$(nvram get on_wifidhcp_access_opennet)" ]; then
		iptables -t nat -A POSTROUTING -o $WIFIDEV -s $DHCPWIFINET_PRE -j MASQUERADE
		if [ -n "$WANDEV" ] && [ -n "$WANOLSR" ] && [ -z "$LANOLSR" ]; then
			iptables -t nat -A POSTROUTING -o $WANDEV -s $DHCPWIFINET_PRE -j MASQUERADE
		elif [ -n "$LANOLSR" ]; then
			iptables -t nat -A POSTROUTING -o $LANDEV -s $DHCPWIFINET_PRE -j MASQUERADE
		fi
	fi

	# Mask packets from LAN and DHCP-WIFI to WAN
	if [ -n "$WANDEV" ] && [ -z "$WANOLSR" ]; then
		# Mask packets to WAN
		iptables -t nat -A POSTROUTING -o $WANDEV -s $LANNET/$LANPRE -j MASQUERADE
		[ -n "$DHCPWIFINET_PRE" ] && iptables -t nat -A POSTROUTING -o $WANDEV -s $DHCPWIFINET_PRE -j MASQUERADE
	fi
}

set_ipfilter() {
	iptables -N ipfilter

	# Receive on /dev/lo? Only to/from 127.x.x.x and
	# to local devs because of kernel route tricks
	iptables -A ipfilter -i $LODEV -s $LONET/$LOPRE -d $LONET/$LOPRE -j ACCEPT
	iptables -A ipfilter -i $LODEV -s $LANADR -d $LANADR -j ACCEPT
	test -n "$WIFIADR" && iptables -A ipfilter -i $LODEV -s $WIFIADR -d $WIFIADR -j ACCEPT
	# Receive on /dev/et? Only to/from 192.168.x.x
	iptables -A ipfilter -i $LANDEV -s $LANNET/$LANPRE -d $LANNET/$LANPRE -j ACCEPT
	# Receive on /dev/wl? Only to 172.x.x.x, from inet ok
	test -n "$WIFIADR" && $DEBUG && iptables -A ipfilter -i $WIFIDEV -s $LONET/$LOPRE -j LOG
	test -n "$WIFIADR" && iptables -A ipfilter -i $WIFIDEV -s $LONET/$LOPRE -j DROP
	test -n "$WIFIADR" && $DEBUG && iptables -A ipfilter -i $WIFIDEV -s $LANNET/$LANPRE -j LOG
	test -n "$WIFIADR" && iptables -A ipfilter -i $WIFIDEV -s $LANNET/$LANPRE -j DROP
	test -n "$WIFIADR" && iptables -A ipfilter -i $WIFIDEV -d $WIFINET/$WIFIPRE -j ACCEPT

	# Send to /dev/lo? Only to/from 127.x.x.x and
	# from local devs because of kernel route tricks
	iptables -A ipfilter -o $LODEV -s $LONET/$LOPRE -d $LONET/$LOPRE -j ACCEPT
	iptables -A ipfilter -o $LODEV -s $LANADR -d $LANADR -j ACCEPT
	test -n "$WIFIADR" && iptables -A ipfilter -o $LODEV -s $WIFIADR -d $WIFIADR -j ACCEPT
	# Send to /dev/et? Only to/from 192.168.x.x
	iptables -A ipfilter -o $LANDEV -s $LANNET/$LANPRE -d $LANNET/$LANPRE -j ACCEPT
	# Send to /dev/wl? Only from 172.16.x.x, to inet ok
	test -n "$WIFIADR" && $DEBUG && iptables -A ipfilter -o $WIFIDEV -d $LONET/$LOPRE -j LOG
	test -n "$WIFIADR" && iptables -A ipfilter -o $WIFIDEV -d $LONET/$LOPRE -j DROP
	test -n "$WIFIADR" && $DEBUG && iptables -A ipfilter -o $WIFIDEV -d $LANNET/$LANPRE -j LOG
	test -n "$WIFIADR" && iptables -A ipfilter -o $WIFIDEV -d $LANNET/$LANPRE -j DROP
	test -n "$WIFIADR" && iptables -A ipfilter -o $WIFIDEV -s $WIFINET/$WIFIPRE -j ACCEPT
}

set_wifi_lan_fw() {
	# Accept fragments
	iptables -A INPUT -f -j ACCEPT

	# Allow DHCP. Note: Answers do not show up in INPUT|FORWARD
	test -n "$WIFIADR" && iptables -A INPUT -i $WIFIDEV -d 255.255.255.255 -p udp --sport 68 --dport 67 -j ACCEPT
	iptables -A INPUT -i $LANDEV -d 255.255.255.255 -p udp --sport 68 --dport 67 -j ACCEPT

	iptables -A INPUT -j ipfilter

	# Accept all OLSR broadcasts, even to 255.255.255.255
	iptables -A INPUT -i $WIFIDEV -s ! $LANNET/$LANPRE -p udp --sport 698 --dport 698 -j ACCEPT
	test -n "$WIFIADR" && iptables -A INPUT -i $LANDEV -s $LANNET/$LANPRE -d $WIFIADR -j ACCEPT
	$DEBUG && iptables -A INPUT -j LOG --log-prefix "IN:"
	iptables -A INPUT -j DROP

	iptables -A OUTPUT -j ipfilter
	test -n "$WIFIADR" && iptables -A OUTPUT -o $LANDEV -s $WIFIADR -d $LANNET/$LANPRE -j ACCEPT
	$DEBUG && iptables -A OUTPUT -j LOG --log-prefix "OUT:"
	iptables -A OUTPUT -j DROP

	if [ -n "$WIFIMTU" ] && [ 1500 -gt $WIFIMTU ]; then
		# Repair braindead websites
		iptables -A FORWARD -o $WIFIDEV -p tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu
	fi
	iptables -A FORWARD -j ipfilter
	iptables -A FORWARD -i $WIFIDEV -o $WIFIDEV -j ACCEPT
	test -n "$WIFIADR" && iptables -A FORWARD -i $WIFIDEV -d 255.255.255.255 -p udp --sport 68 --dport 67 -j ACCEPT
	iptables -A FORWARD -i $LANDEV -d 255.255.255.255 -p udp --sport 68 --dport 67 -j ACCEPT
	test -n "$WIFIADR" && iptables -A FORWARD -i $WIFIDEV -o $LANDEV -m state --state ESTABLISHED,RELATED -j ACCEPT
	test -n "$WIFIADR" && iptables -A FORWARD -i $LANDEV -o $WIFIDEV -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT
	$DEBUG && iptables -A FORWARD -j LOG --log-prefix "FW:"
	iptables -A FORWARD -j DROP
}

clear_fw() {
	for T in filter nat mangle; do
		iptables -t $T -F 2>/dev/null
		iptables -t $T -X 2>/dev/null
		case $T in
			filter)
				for C in INPUT FORWARD OUTPUT; do
					iptables -t $T -P $C ACCEPT 2>/dev/null
				done
			;;
			nat)
				for C in PREROUTING OUTPUT POSTROUTING; do
					iptables -t $T -P $C ACCEPT 2>/dev/null
				done
			;;
			mangle)
				for C in PREROUTING INPUT FORWARD OUTPUT POSTROUTING; do
					iptables -t $T -P $C ACCEPT 2>/dev/null
				done
			;;
		esac
	done
}

case $1 in
	start)
		echo "Starting firewall..."
		eval $(/usr/bin/netparam)
		if [ "$(nvram get fw_disable)" != "1" ]; then
			# I had several cases where some netparams weren't set from the beginning.
			# So I'll check if they are set and if not wait a little while
			count=
			while [ $((count++)) -lt 10 ]; do
				sleep=
				for V in LODEV LONET LOPRE LANDEV LANNET LANPRE WIFIDEV WIFINET WIFIPRE; do
					if [ -z "$(eval echo \$$V)" ]; then
						logger "S45firewall $V not set, sleeping for two seconds"
						sleep=1; break;
					fi
				done;
				if [ -z "$sleep" ]; then break; fi
				sleep 2;
				eval $(/usr/bin/netparam);
			done;
			
			# if WANDEV is ppp, it migth take a long time till interface is up and recognized by netparam
			# so set it by hand
			WANDEV="$(nvram get wan_ifname)"
			WANADR="$(nvram get wan_ipaddr)"
			if [ "$(ipcalc $WANADR $WIFIMSK|grep "NETWORK"|cut -d'=' -f2)" = "$(ipcalc $WIFIADR $WIFIMSK|grep "NETWORK"|cut -d'=' -f2)" ]; then
				WANOLSR=1
			fi

			if [ -z "$WIFIADR" ] || [ "$(ipcalc $LANADR $WIFIMSK|grep "NETWORK"|cut -d'=' -f2)" != "$(ipcalc $WIFIADR $WIFIMSK|grep "NETWORK"|cut -d'=' -f2)" ]; then
				set_ipfilter
				set_wifi_lan_fw
			fi
		fi
		set_masq
		test -e /etc/local.fw && . /etc/local.fw start
	;;
	stop)
		echo "Stopping firewall..."
		test -e /etc/local.fw && . /etc/local.fw stop
		clear_fw
	;;
	masq)
		echo "Masquerading setup..."
		eval $(/usr/bin/netparam)
		set_masq
	;;
	reload)
		echo "Reload firewall..."
		# No clear_fw to preserve -t nat
		iptables -F
		iptables -X ipfilter
		eval $(/usr/bin/netparam)
		if [ "$(nvram get fw_disable)" != "1" ]; then
			if [ -z "$WIFIADR" ] || [ "$(ipcalc $LANADR $WIFIMSK|grep "NETWORK"|cut -d'=' -f2)" != "$(ipcalc $WIFIADR $WIFIMSK|grep "NETWORK"|cut -d'=' -f2)" ]; then
				set_ipfilter; set_wifi_lan_fw
			fi
		fi
	;;
	restart)
		$0 stop
		$0 start
	;;
	status)
		iptables -v -n -L
	;;
	*)
		echo "Usage: $0 start|stop|masq|reload|restart|status"
	;;
esac
