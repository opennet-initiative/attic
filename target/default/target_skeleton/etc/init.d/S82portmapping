#!/bin/sh
## this is currently an extremly opennet-specific solution.

test -n "$FAILSAFE" && exit


map_port_to_ip() {
	if [ $3 = "map" ]; then
		echo "forwarding port(s) "$1" to "$2
		ACT_APPEND="A"; ACT_INSERT="I"; rulenum="3"
	else
		echo "deleting portforwarding of "$1" to "$2
		ACT_APPEND="D"; ACT_INSERT="D"; rulenum=""
	fi
	iptables -t nat -$ACT_APPEND PREROUTING -p udp -i $TUNDEV --dport $1 -j DNAT --to-destination $2
	iptables -t nat -$ACT_APPEND PREROUTING -p tcp -i $TUNDEV --dport $1 -j DNAT --to-destination $2
	iptables -$ACT_INSERT FORWARD $rulenum -i $TUNDEV -o $LANDEV -s ! $LANNET/$LANPRE -d $LANNET/$LANPRE -m state --state NEW -p tcp --dport $1 -j ACCEPT
	iptables -$ACT_INSERT FORWARD $rulenum -i $TUNDEV -o $LANDEV -s ! $LANNET/$LANPRE -d $LANNET/$LANPRE -m state --state NEW -p udp --dport $1 -j ACCEPT
}

# takes one argument: 'map' or ('unmap' or anything else - doesn't actually matter)
map_all_ports() {
	#calculate the port base
	port=$((10000+10*($(nvram get wifi_ipaddr | cut -d'.' -f4)-1)))
	last_port=$(($port+9))
	
	if [ "$(nvram get on_mapall2one)" = "true" ]; then
		ip=$(nvram get on_mapaddr0)
		if [ -n "$ip" ]; then map_port_to_ip $port:$last_port $ip $1; fi
	else
		#try to map all ten ports
		for V in 0 1 2 3 4 5 6 7 8 9; do
			ip=$(nvram get on_mapaddr$V)
			if [ -n "$ip" ]; then map_port_to_ip $port $ip $1; fi
			port=$(($port+1))
		done
	fi
}

TUNDEV=tun+
eval $(/usr/bin/netparam)

case $1 in
	start)
	echo "Mapping ports"
	map_all_ports "map"
	echo "."
	;;
	stop)
	echo "Un-Mapping ports"
	map_all_ports "unmap"
	echo "."
	;;
	restart)
		$0 stop
		$0 start
	;;
	*)
		echo "Usage: $0 start|stop|restart"
	;;
esac
