#!/bin/sh

test -n "$FAILSAFE" && exit

DEBUG="false"	# Dump dropped packets to klog, show with "dmesg -c"
if [ -n "$(nvram get on_fw_debug)" ]; then DEBUG=$(nvram get on_fw_debug); fi
if [ -z "$(lsmod | grep ipt_LOG)" ]; then DEBUG="false"; fi

# takes one argument: 'create' or ('remove' or anything else - doesn't actually matter)
mac_access() {
        mac_addrs=$(nvram get on_wifidhcp_macaddrs)
	if [ $1 = "create" ]; then
		ACT_INSERT="I";
		rulenum="$(iptables -L FORWARD --line-numbers -n -v | awk '$8 ~ "^ppp" && $13 == "TCPMSS" {print $1+1; exit}')"
	else
		ACT_INSERT="D"; rulenum=""
	fi

	# frames vom wifi/dhcp zum tunnel
	iptables -$ACT_INSERT FORWARD $rulenum -i $WIFIDEV -o $TUNDEV -s $DHCPWIFINET_PRE -d ! $WIFINET_PRE -j DROP
	$DEBUG && iptables -$ACT_INSERT FORWARD $rulenum -i $WIFIDEV -o $TUNDEV -s $DHCPWIFINET_PRE -d ! $WIFINET_PRE -j LOG --log-prefix "WIFIDHCP-TUN-FWOUT:"
	for mac_addr in $mac_addrs; do
		iptables -$ACT_INSERT FORWARD $rulenum -i $WIFIDEV -o $TUNDEV -s $DHCPWIFINET_PRE -d ! $WIFINET_PRE -m mac --mac-source $mac_addr -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT
	done;
	iptables -$ACT_INSERT FORWARD $rulenum -i $WIFIDEV -o $TUNDEV -s $DHCPWIFINET_PRE -d ! $WIFINET_PRE -m state --state INVALID -j DROP

	# frames vom tunnel zum wifi/dhcp
	iptables -$ACT_INSERT FORWARD $rulenum -i $TUNDEV -o $WIFIDEV -s ! $DHCPWIFINET_PRE -d $DHCPWIFINET_PRE -j DROP
	$DEBUG && iptables -$ACT_INSERT FORWARD $rulenum -i $TUNDEV -o $WIFIDEV -s ! $DHCPWIFINET_PRE -d $DHCPWIFINET_PRE -j LOG --log-prefix "WIFIDHCP-TUN-FWIN:"
	iptables -$ACT_INSERT FORWARD $rulenum -i $TUNDEV -o $WIFIDEV -s ! $DHCPWIFINET_PRE -d $DHCPWIFINET_PRE -m state --state ESTABLISHED,RELATED -j ACCEPT
	iptables -$ACT_INSERT FORWARD $rulenum -i $TUNDEV -o $WIFIDEV -s ! $DHCPWIFINET_PRE -d $DHCPWIFINET_PRE -m state --state INVALID -j DROP

	# frames vom wifi/dhcp zu ppp
	iptables -$ACT_INSERT FORWARD $rulenum -i $WIFIDEV -o $PPPDEV -s $DHCPWIFINET_PRE -d ! $WIFINET_PRE -j DROP
	$DEBUG && iptables -$ACT_INSERT FORWARD $rulenum -i $WIFIDEV -o $PPPDEV -s $DHCPWIFINET_PRE -d ! $WIFINET_PRE -j LOG --log-prefix "WIFIDHCP-PPP-FWOUT:"
	for mac_addr in $mac_addrs; do
		iptables -$ACT_INSERT FORWARD $rulenum -i $WIFIDEV -o $PPPDEV -s $DHCPWIFINET_PRE -d ! $WIFINET_PRE -m mac --mac-source $mac_addr -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT
	done;
	iptables -$ACT_INSERT FORWARD $rulenum -i $WIFIDEV -o $PPPDEV -s $DHCPWIFINET_PRE -d ! $WIFINET_PRE -m state --state INVALID -j DROP

	# frames vom ppp zum wifi/dhcp
	iptables -$ACT_INSERT FORWARD $rulenum -i $PPPDEV -o $WIFIDEV -s ! $DHCPWIFINET_PRE -d $DHCPWIFINET_PRE -j DROP
	$DEBUG && iptables -$ACT_INSERT FORWARD $rulenum -i $PPPDEV -o $WIFIDEV -s ! $DHCPWIFINET_PRE -d $DHCPWIFINET_PRE -j LOG --log-prefix "WIFIDHCP-PPP-FWIN:"
	iptables -$ACT_INSERT FORWARD $rulenum -i $PPPDEV -o $WIFIDEV -s ! $DHCPWIFINET_PRE -d $DHCPWIFINET_PRE -m state --state ESTABLISHED,RELATED -j ACCEPT
	iptables -$ACT_INSERT FORWARD $rulenum -i $PPPDEV -o $WIFIDEV -s ! $DHCPWIFINET_PRE -d $DHCPWIFINET_PRE -m state --state INVALID -j DROP
}

# get network parameter (formerly done in netparam)
TUNDEV=tun+
PPPDEV=ppp+

on_wifidhcp_ipaddr=$(nvram get on_wifidhcp_ipaddr)
if [ -n "$on_wifidhcp_ipaddr" ]; then DHCPWIFINET_PRE=$(ipcalc $on_wifidhcp_ipaddr $(nvram get on_wifidhcp_netmask) | awk 'BEGIN{FS="="} { if ($1=="NETWORK") net=$2; if ($1="PREFIX") pre=$2;} END{print net"/"pre}'); fi
	
wifi_ipaddr=$(nvram get wifi_ipaddr)
if [ -n "$wifi_ipaddr" ]; then WIFINET_PRE=$(ipcalc $wifi_ipaddr $(nvram get wifi_netmask) | awk 'BEGIN{FS="="} { if ($1=="NETWORK") net=$2; if ($1="PREFIX") pre=$2;} END{print net"/"pre}'); fi

WIFIDEV=$(nvram get wifi_ifname)
LANDEV=$(nvram get lan_ifname)
WANDEV=$(nvram get wan_ifname)

case $1 in
        start)
        if [ -n "$on_wifidhcp_ipaddr" ] && [ -n "$wifi_ipaddr" ]; then
			if [ -n "$(lsmod | grep ipt_mac)" ] && [ -e /usr/lib/iptables/libipt_mac.so ]; then
				echo "enabling access to tunnel/wan (if selected)"
				mac_access "create"
			elif [ "$(nvram get wl0_mode)" = "ap" ]; then
				echo "enabling access to tunnel/wan for wifidog traffic (if selected)"
				mac_access "create"
				if [ "$(nvram get on_wifidhcp=)" != "on" ]; then
					nvram set on_wifidhcp="on"; nvram commit;
				fi
				cp /etc/dhcp-fwd.conf_preset /etc/dhcp-fwd.conf
				echo "if $WIFIDEV true false true" >>/etc/dhcp-fwd.conf
				# assume Opennet in 192.168.0.0/16 network - just straightforward
				OPENNET_PRE="192.168.0.0/16"
				. /usr/sbin/helper_functions.sh
				if [ "$(get_NETPRE_dev $LANDEV)" = "$OPENNET_PRE" ]; then
					echo "if $LANDEV false true true" >>/etc/dhcp-fwd.conf
				fi
				if [ "$(get_NETPRE_dev $WANDEV)" = "$OPENNET_PRE" ]; then
					echo "if $WANDEV false true true" >>/etc/dhcp-fwd.conf
				fi
			fi
		else
			echo "wifidhcp disabled"
		fi
        ;;
        stop)
        if [ -n "$on_wifidhcp_ipaddr" ] && [ -n "$wifi_ipaddr" ] && [ -n "$(lsmod | grep ipt_mac)" ] && [ -e /usr/lib/iptables/libipt_mac.so ]; then
		echo "removing access to tunnel/wan"
		mac_access "remove"
	fi
        ;;
        restart)
                $0 stop
                $0 start
        ;;
        *)
                echo "Usage: $0 start|stop|restart"
        ;;
esac