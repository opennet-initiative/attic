#!/bin/sh -e

test -n "$FAILSAFE" && exit

DAEMON=/usr/sbin/openvpn
CONFIG_DIR=/etc/openvpn
test -x $DAEMON || exit 0
test -d $CONFIG_DIR || exit 0
test -d /var/run || mkdir -p /var/run

DEBUG="false"
if [ -n "$(nvram get on_fw_debug)" ]; then DEBUG=$(nvram get on_fw_debug); fi
if [ -z "$(lsmod | grep ipt_LOG)" ]; then DEBUG="false"; fi

# one parameter, IP of usergateway
add_fw_rules() {
	iptables -I OUTPUT 1 -p udp --dport 1602 -o ! $WANDEV -d $1 -j DROP
	$DEBUG && iptables -I OUTPUT 1 -p udp --dport 1602 -o ! $WANDEV -d $1 -j LOG --log-prefix "ugw wrong interface:"
}

del_fw_rules() {
	get_rulenum() {
		iptables -L OUTPUT --line-numbers -n -v | awk -v ddev="$WANDEV" '$5 == "udp" && $8 == "!"ddev && $12 == "dpt:1602" {print $1; exit}'
	}
	while $(iptables -D OUTPUT $(get_rulenum $1 $2) 2>/dev/null); do : ; done
}

start_vpn () {
	case "$NAME" in
	"opennet_user")
		on_gw="$(nvram get on_gw)"
		if [ -z "$on_gw" ]; then
			echo -n " gateway not defined yet FAILED->" # wait till a gateway is found (should be done by cron.minutely)
		else
			$DAEMON --daemon --writepid /var/run/openvpn.$NAME.pid \
				--remote $on_gw 1600 \
				--config $CONFIG_DIR/$NAME.conf \
				--cd $CONFIG_DIR || echo -n " FAILED->"
		fi
	;;
	"opennet_ugw")
		on_ugw="$(nvram get on_ugw)"
		on_ugw_ip=$(nslookup $on_ugw 2>/dev/null | tail -n 1 | awk '{ print $2 }')
		if [ -z "$WANDEV" ]; then
			echo -n " (WAN device not available - usergateway not available) FAILED->"
		elif [ "$(nvram get on_share_internet)" != "on" ]; then
			echo -n " (opennet_usergateway not activated) FAILED->"
		elif [ -z "$on_ugw" ]; then
			echo -n " (usergateway not defined yet) FAILED->"
		elif [ -z "$on_ugw_ip" ]; then
			echo -n " (can't get IP of usergateway $on_ugw) FAILED->"
		else
			# forbid usergateway-tunnel to use other than WAN device
			del_fw_rules
			add_fw_rules $on_ugw_ip
			$DAEMON --daemon --writepid /var/run/openvpn.$NAME.pid \
				--remote $on_ugw 1602 \
				--config $CONFIG_DIR/$NAME.conf \
				--cd $CONFIG_DIR || (del_fw_rules && echo -n " FAILED->")
		fi
	;;
	esac
	echo -n " $NAME"
}

stop_vpn () {
	if [ "$NAME" = "opennet_ugw" ]; then
		del_fw_rules
	fi
	kill `cat $PIDFILE` || true
	rm $PIDFILE
}

WANDEV=$(nvram get wan_ifname)

case "$1" in
start)
	echo -n "Starting openvpn:"
	configs="$(cd $CONFIG_DIR; ls *.conf 2> /dev/null)"
	if test ! -z $2 ; then
		configs="$2.conf"
		if test ! -e $CONFIG_DIR/$configs ; then
			echo " No such VPN: $2."; exit 1
		fi
	fi
	for CONFIG in $configs; do
		NAME=${CONFIG%%.conf}
		if test -e /var/run/openvpn.$NAME.pid ; then
			echo -n " ($NAME is still running)"
		else
			start_vpn
		fi
	done
	echo "."
;;
stop)
	echo -n "Stopping openvpn:"

	if test -z $2 ; then
		for PIDFILE in `ls /var/run/openvpn.*.pid 2> /dev/null`; do
			NAME=`echo $PIDFILE | cut -c18-`
			NAME=${NAME%%.pid}
			stop_vpn
			echo -n " $NAME"
		done
	else
		if test -e /var/run/openvpn.$2.pid ; then
			PIDFILE=`ls /var/run/openvpn.$2.pid 2> /dev/null`
			NAME=`echo $PIDFILE | cut -c18-`
			NAME=${NAME%%.pid}
			stop_vpn
			echo -n " $NAME"
		else
			echo -n " No such VPN: $2"
		fi
	fi
	echo "."
;;
# We only 'reload' for running VPNs. New ones will only start with 'start' or 'restart'.
reload|force-reload)
	echo -n "Reloading openvpn:"
	for PIDFILE in `ls /var/run/openvpn.*.pid 2> /dev/null`; do
		NAME=`echo $PIDFILE | cut -c18-`
		NAME=${NAME%%.pid}
		# If openvpn if running under a different user than root we'll need to restart
		if egrep '^( |\t)*user' $CONFIG_DIR/$NAME.conf > /dev/null 2>&1 ; then
			stop_vpn
			sleep 1
			start_vpn
			echo -n "(restarted)"
		else
			kill -HUP `cat $PIDFILE` || true
		#    start-stop-daemon --stop --signal HUP --quiet --oknodo \
		#      --exec $DAEMON --pidfile $PIDFILE
			echo -n " $NAME"
		fi
	done
	echo "."
	;;

restart)
	$0 stop $2
	sleep 1
	$0 start $2
	;;
*)
	echo "Usage: $0 {start|stop|reload|restart|force-reload}" >&2
	exit 1
	;;
esac

exit 0
